# 250214 upload

import streamlit as st
from PIL import Image
from io import BytesIO
from PIL import Image
import base64
import os
import json
from openai import OpenAI
import pandas as pd
from io import StringIO
import pdfplumber
import openai
from openai import OpenAI
from langchain_community.document_loaders import PyMuPDFLoader
import base64
import fitz
import time
from datetime import datetime, timedelta

os.environ["OPENAI_API_KEY"] = "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"
# api_key = st.secrets["openai"]["OpenAI_key"]
#os.environ["OPENAI_API_KEY"] = st.secrets["OPENAI_API_KEY"]
st.set_page_config(layout="wide", page_title="Voronoi Label Studio🧑‍💻")

st.write("## Clinical dataset LabelMate")
st.markdown("Please upload your files (the **full paper** and **table images**) first, and review the table generated by GPT. There may be **errors**, so please check carefully.")
st.sidebar.write("## Upload Your Files :gear:")

tab1, tab2, tab3, tab4, tab5, tab6, tab7, tab8 = st.tabs(["Efficacy", "Toxicity", "Common", "Treat_info", "PK_Common", "PK_Dose_independent", "PK_dosing info", "PK_measure"])
paper_pdf_upload = st.sidebar.file_uploader("Full Paper PDF format", type=["PDF"]) # 1개까지 허용
paper_efficacy_upload = st.sidebar.file_uploader("Efficacy Table PNG format", type=["PNG"], accept_multiple_files=True) # 3개까지 허용
paper_toxicity_upload = st.sidebar.file_uploader("Toxicity Table PNG format", type=["PNG"], accept_multiple_files=True) # 3개까지 허용
paper_dose_upload = st.sidebar.file_uploader("Dose info Table PNG format", type=["PNG"], accept_multiple_files=True) # 3개까지 허용

def check_column_headers(df1, df2):
    return list(df1.columns) == list(df2.columns)

def encode_image(image_bytes):
    return base64.b64encode(image_bytes).decode('utf-8')

def eff_pdf_to_text(upload):

    if upload is not None:
            start = time.time()
            file_bytes = upload.read()
            pdf_document = fitz.open(stream=file_bytes, filetype="pdf")
            full_text = ""
            for page_num in range(pdf_document.page_count):
                page = pdf_document.load_page(page_num)
                full_text += page.get_text()

            client = OpenAI()
            response_text = client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {
                        "role": "user",
                        "content": [
                            {
                                "type": "text",
                                "text": f"제공한 텍스트 자료에서 Abstract 문단 내용과 efficacy에 대해 설명하고 있는 모든 문단들을 가져와서 출력해줘. 텍스트 자료:{full_text}.",
                            },
                        ],
                    }
                ],
            )
            end = time.time()
            elapsed_time = end - start
            print(f"eff_pdf_to_text()에 걸린 시간: {elapsed_time} sec")

            related_text_input = response_text.choices[0].message.content
            print("최종 사용할 논문 본문 내용:\n", related_text_input)
            return related_text_input

def efficacy_table_image(upload):

    if upload:
        start = time.time()
        base64_image = encode_image(upload.read())
        client = OpenAI()
        response_replic = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "text",
                            "text": """

                            **해야하는 일 **
                            제공된 이미지에 있는 표를 텍스트 표로 바꿔서 csv format으로 반환해줘. 추가 설명은 주지 말고 CSV 포멧 표만 반환해.
                            이때, 표에 함께 있는 caption 글을 csv format 맨 밑에 행에 함께 반환해줘. 행 누락 없이 모든 정보가 담겨야해. "정보 누락하지마"

                            **고려할 것**
                            행/열을 잘 구분하고, 이때 **띄어쓰기나 볼드체 등의 특징**을 보고, **상위 개념 하위 개념** 관계를 모두 파악하여 상위항목(예를 들어 Objective response rate)-하위항목(at 8 mo)으로 **합쳐서 행**으로 만들어줘.
                            수치가 **정확**하게 기입되어야해. 모르겠으면 빈칸으로 남겨두고, 확실한 것만 기입해. 가끔 윗 행과 아래 행의 수치를 바꿔서 적거나 새로 만드는 경우가 있더라. 헷갈리면 빈칸으로 냅둬.

                            """,
                        },
                        {
                            "type": "image_url",
                            "image_url": {"url": f"data:image/jpeg;base64,{base64_image}"},
                        },
                    ],
                }
            ],
        )

        response_replic = response_replic.choices[0].message.content

        rows111 = response_replic.split("\n")
        data111 = [row.split(",") for row in rows111]
        df111 = pd.DataFrame(data111)
        df111 = df111.applymap(lambda x: x.replace('"', '') if isinstance(x, str) else x)

        end = time.time()
        elapsed_time = end - start
        print(f"efficacy_table_image()에 걸린 시간: {elapsed_time} sec \n\n")

        related_table_input = df111.to_csv(index=False)

        # CSV 문자열을 행으로 나누고 각 행을 리스트로 변환
        rows111 = related_table_input.split("\n")
        data111 = [row.split(",") for row in rows111]

        df111 = pd.DataFrame(data111)
        df111 = df111.applymap(lambda x: x.replace('"', '') if isinstance(x, str) else x)

        start_index = df111[df111.iloc[:, 0].str.contains('```', na=False)].index[0]  # '```' 찾기
        header_row = start_index + 1  # 헤더는 '```' 다음 행

        columns = df111.iloc[header_row].tolist()
        data = df111.iloc[header_row + 1:].reset_index(drop=True)
        related_table_input = pd.DataFrame(data.values, columns=columns)
        
        print("\n efficacy_table_image() 표 복제 출력:",related_table_input)
    else:
            related_table_input = None
    return related_table_input

def efficacy_table(related_table_input, related_text_input): #우선 related_text_input 빼둠

    start = time.time()
    client = OpenAI()
    response_our_excel = client.chat.completions.create(
    model="gpt-4o",
     messages=[
          {
              "role": "user",
              "content": f"""
              You will be given a CSV table as input. 그것을 보고, 표의 행/열을 정확히 구분해서 수치에 대한 내용을 줄글로 모든 항목들을 설명해.
              그 다음 그 줄글을 이용해서 output data structure에 맞게 dataframe을 만들어줘.
              제공된 데이터를 모두 사용해야해.

              ### **Input Data Rules:**
              - The input is:
              ```
              {related_table_input}, {related_text_input}
              ```
              - **Do NOT modify, rephrase, summarize, omit, or alter any text, numbers, units, expressions, or symbols in any way.**
              - **Preserve full content, even if the text is long or contains commas, parentheses, or special characters.**
              - **Extract data exactly as it appears in the original table, maintaining full text integrity.**
              - Extract the correct values **by matching the row and column structure**, ensuring that all content from the relevant cells is fully retained.

              ### **Output Data Structure:**
              The output should be a new table with the following columns:
              ["treat_group", "sub_group", "no. patients", "category", "value(#)","value(%)", "range_type", "range_low", "range_high"]
              Each column follows these strict rules:
              - **treat_group**: 용량 단위로 구분이 되어져있을 경우, 여기다가 용량을 써줘.
              - **sub_group**: Extracted from the column headers of the input table. 용량 정보가 있다면 용량 정보는 빼줘.
              - **no. patients**: The total number of patients in each `sub_group`, extracted exactly as written (수치만 적어야해. 예를 들어, 총 환자 수가 몇 명인지를 N=10 이렇게 표시하지말고, 10이라고 적어.).
              - **category**: Extracted from row headers, containing treatment responses **exactly as written** (e.g., `"Progression-free survival†, Median (95% CI) — mo"`, including all symbols, punctuation, and formatting).
              - **Do NOT cut, truncate, or shorten this text in any way. The full row header must be preserved exactly as in the input.**
              - Check if the value represents a count (#) or a percentage (%), and categorize it accordingly as value (#) or value (%). mo의 경우 #에 적고, 그냥 수치인지 퍼센티지인지 구분해서 맞는 column에 넣어. metric은 적지 않아도 돼.
              - **Do NOT alter or remove units. If the cell contains multiple values, keep them together as a single string.**
              - **range_type**: Extract the confidence interval or range exactly as stated (e.g., `"95% CI"`).
              - **range_low** / **range_high**: Extract the exact minimum and maximum values from the range **without modification**.

              ### **Strict Output Rules:**
              - **Preserve all formatting, symbols, parentheses, spacing, commas, and special characters exactly as they appear in the input.**
              - **If a value includes a comma but was in a single cell in the original table, KEEP IT TOGETHER. Do NOT separate it into multiple columns.**
              - **Ensure that "category" contains the full original row header text without omission. DO NOT truncate long text.**
              - **DO NOT split, modify, or remove any part of the extracted data. Every cell must remain fully intact.**
              - **Return the final structured data in pure CSV format, with no additional text, explanations, or notes.**
              """
          }
      ]
  )

    #print(response_our_excel)
    response_our_excel_data = response_our_excel.choices[0].message.content

    rows111 = response_our_excel_data.split("\n")
    data111 = [row.split(",") for row in rows111]
    df111 = pd.DataFrame(data111)
    df111 = df111.applymap(lambda x: x.replace('"', '') if isinstance(x, str) else x)

    header_idx = df111[df111[0] == 'treat_group'].index[0]
    df111.columns = df111.iloc[header_idx].values
    df111.iloc[header_idx + 1:] = df111.iloc[header_idx + 1:].applymap(lambda x: str(x).replace('%', '') if isinstance(x, str) else x)
    df_cleaned = df111.iloc[header_idx + 1:].reset_index(drop=True)
    end_idx = df_cleaned[df_cleaned.iloc[:, 0].str.contains('```', na=False)].index[0]
    efficacy_output = df_cleaned.iloc[:end_idx].reset_index(drop=True)

    end = time.time()
    elapsed_time = end - start
    print(f"efficacy_table()에 걸린 시간: {elapsed_time} sec\n\n")

    efficacy_output = efficacy_output.sort_values(by=['treat_group', 'sub_group'], ascending=[True, True]).reset_index(drop=True)
    print(efficacy_output)
    return efficacy_output

def efficacy_add_table(eff_table1, eff_table2):
    if eff_table1 is not None and eff_table2 is not None: 
        if check_column_headers(eff_table1, eff_table2):
            efficacy_output = pd.concat([eff_table1, eff_table2], axis=0, ignore_index=True)
            return efficacy_output

    elif eff_table1 is not None and eff_table2 is None: 
            efficacy_output = eff_table1
            return efficacy_output

    else:
        efficacy_output = None
        return None


def tox_pdf_to_text(upload):

    if upload is not None:
            file_bytes = upload.read()
            pdf_document = fitz.open(stream=file_bytes, filetype="pdf")
            full_text = ""
            for page_num in range(pdf_document.page_count):
                page = pdf_document.load_page(page_num)
                full_text += page.get_text()

            client = OpenAI()
            response_text = client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {
                        "role": "user",
                        "content": [
                            {
                                "type": "text",
                                "text": f"제공한 텍스트 자료에서 Abstract 문단 내용과 dverse Events(or toxicity) 대해 설명하고 있는 모든 문단들을 가져와서 출력해줘. 텍스트 자료:{full_text}.",
                            },
                        ],
                    }
                ],
            )

            related_text_input = response_text.choices[0].message.content
            print("최종 사용할 논문 본문 내용:\n", related_text_input)
            return related_text_input

def tox_table_image(upload):
    if upload:
        base64_image = encode_image(upload.read())
        client = OpenAI()
        response_replic = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "text",
                            "text": """

                            **해야하는 일 **
                            제공된 이미지에 있는 표를 텍스트 표로 바꿔서 csv format으로 반환해줘.
                            추가 설명은 주지 말고 CSV 포멧 표만 반환해.
                            이때, 표에 함께 있는 caption 글을 csv format 맨 밑에 행에 함께 반환해줘.
                            모든 정보를 다 담아야해. 누락하지마.

                            **고려할 것**
                            행/열을 잘 구분하고, 이때 **띄어쓰기나 볼드체 등의 특징**을 보고, **상위 개념 하위 개념** 관계를 모두 파악하여 상위항목(예를 들어 treat group name or 약물 복용 mg)-하위항목(grade 몇 번째인지)으로 **합쳐서 행**으로 만들어줘.

                            """,
                        },
                        {
                            "type": "image_url",
                            "image_url": {"url": f"data:image/jpeg;base64,{base64_image}"},
                        },
                    ],
                }
            ],
        )

        response_replic = response_replic.choices[0].message.content

        rows111 = response_replic.split("\n")
        data111 = [row.split(",") for row in rows111]
        df111 = pd.DataFrame(data111)
        df111 = df111.applymap(lambda x: x.replace('"', '') if isinstance(x, str) else x)

        related_table_input = df111.to_csv(index=False)

        rows111 = related_table_input.split("\n")
        data111 = [row.split(",") for row in rows111]

        df111 = pd.DataFrame(data111)
        df111 = df111.applymap(lambda x: x.replace('"', '') if isinstance(x, str) else x)

        start_index = df111[df111.iloc[:, 0].str.contains('```', na=False)].index[0]  # '```' 찾기
        header_row = start_index + 1  # 헤더는 '```' 다음 행

        columns = df111.iloc[header_row].tolist()
        data = df111.iloc[header_row + 1:].reset_index(drop=True)
        related_table_input = pd.DataFrame(data.values, columns=columns)
        print("\n tox_table_image()에서 표 복제된 결과:",related_table_input)

    else:
            related_table_input = None
    return related_table_input

def tox_table(related_table_input, related_text_input):
    client = OpenAI()
    response_our_excel = client.chat.completions.create(
      model="gpt-4o",
      messages=[
          {
              "role": "user",
              "content": f"""
                You will be given a CSV table as input. 그것을 보고, 표의 행/열을 정확히 구분해서 수치에 대한 내용을 줄글로 모든 항목들을 설명해.
                그 다음 그 줄글을 이용해서 output data structure에 맞게 dataframe을 만들어줘.
                제공된 데이터의 모든 정보를 사용해야해.

                My DataFrame columns are: columns = ["treat group", "total no. patients", "adverse event", "AE Type", "grade group", "patient (#)", "patient (%)", "dose reduction (%)", "dose discontinuation (%)", "dose interruption"]
                The table contains information about drug adverse events, including their grades, patient numbers, and percentages.
                Please organize the data such that every adverse event and every grade listed in the table is included in the output.
                No subgroup or category should be omitted.
                Data provided: {related_table_input}

                Especially, when you are working on the column of 'AE type', if the caption says 'drug-related', just write TRAE. If the adverse event occurs during treatment, write TRAE; if it is not related to the drug, write TEAE; if there is no information, write Unknown.

                ## Instructions:
                1. Ensure every adverse event (e.g., diarrhea, rash, etc.) and every grade (e.g., G1, G2, All, etc.) is included in the output.
                2. If any data is missing for a column, explicitly write None.
                3. Maintain the exact formatting of symbols, parentheses, and numbers as shown in the original table.
                4. Return a well-structured table in CSV format, with all values accurately placed in their corresponding columns.
                5. Do not include any descriptions, explanations, or additional text in the output, only the table content.
                   하지만 한 가지 예외 사항이 있어. 만약, 텍스트 데이터를 사용한다면, 어떤 칸을 채우기 위해 텍스트 어느 부분을 사용했는지 알려줘.
                6. "total no. patients" 열의 내용을 쓸 때에는 수치만 적어. 예를 들어 "N=30" 이렇게 적지 말고, 30이라고 적어.
                Make sure the output table includes all subgroups and covers the entirety of the data provided without missing any details.

                가끔 표에 있는 정보를 누락해서 출력하는 경우가 있어. 절대 정보를 누락하지 말고, 정보를 모두 출력해. 빠진 행이 있는지 다시 점검해.
                """
          }
      ]
  )
    response_our_excel_data = response_our_excel.choices[0].message.content

    rows111 = response_our_excel_data.split("\n")
    data111 = [row.split(",") for row in rows111]
    df111 = pd.DataFrame(data111)
    df111 = df111.applymap(lambda x: x.replace('"', '') if isinstance(x, str) else x)

    print("\n\n\n")
    print(df111)
    header_idx = df111[df111[0] == 'treat group'].index[0]
    df111.columns = df111.iloc[header_idx].values
    df_cleaned = df111.iloc[header_idx + 1:].reset_index(drop=True)
    end_idx = df_cleaned[df_cleaned.iloc[:, 0].str.contains('```', na=False)].index[0]
    tox_output = df_cleaned.iloc[:end_idx].reset_index(drop=True)

    print("Tox Ouput:")
    print(tox_output)

    return tox_output


def dose_pdf_to_text(upload):

    if upload is not None:
            file_bytes = upload.read()
            pdf_document = fitz.open(stream=file_bytes, filetype="pdf")
            full_text = ""
            for page_num in range(pdf_document.page_count):
                page = pdf_document.load_page(page_num)
                full_text += page.get_text()

            client = OpenAI()
            response_text = client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {
                        "role": "user",
                        "content": [
                            {
                                "type": "text",
                                "text": f"제공한 텍스트 자료에서 Abstract 문단 내용과 Dose expansion(Dose Interruption, Dose Reduction, Dose Discontinuation)에 대해 설명하고 있는 모든 문단들을 가져와서 출력해줘. 텍스트 자료:{full_text}.",
                            },
                        ],
                    }
                ],
            )

            related_text_input = response_text.choices[0].message.content
            print("최종 사용할 논문 본문 내용:\n", related_text_input)
            return related_text_input

def dose_table_image(upload):
    if upload:
        base64_image = encode_image(upload.read())
        client = OpenAI()
        response_replic = client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {
                "role": "user",
                "content": [
                    {
                        "type": "text",
                        "text": """

                        **해야하는 일 **
                        제공된 이미지에 있는 표를 텍스트 표로 바꿔서 csv format으로 반환해줘.
                        추가 설명은 주지 말고 CSV 포멧 표만 반환해.
                        이때, 표에 함께 있는 caption 글을 csv format 맨 밑에 행에 함께 반환해줘.

                        **고려할 것**
                        주로 복용 정보 혹은 total 정보가 treat_group에 들어갈 거고, Dose reduction, Dose discontinuation, Dose interruption의 내용 위주로 채우면 돼.
                        이때, dose escalation 정보와 dose expansion 정보가 같이 있을 수도 있어. 나는 dose expansion에 대한 정보만 필요하니까 그것만 가져와.
                        "dose reduction (%)", "dose discontinuation (%)", "dose interruption"의 경우 %의 단위에 해당하는 수치만 적어. 예를 들어, 30% => 30, 15(30%) -> 30
                        행/열을 잘 구분하고, 이때 필요하다면 **띄어쓰기나 볼드체 등의 특징**을 보고, **상위 개념 하위 개념** 관계를 모두 파악하여 상위항목-하위항목으로 **합쳐서 행**으로 만들어줘.
                        """,
                    },
                    {
                        "type": "image_url",
                        "image_url": {"url": f"data:image/jpeg;base64,{base64_image}"},
                    },
                ],
            }
        ],
    )

        response_replic = response_replic.choices[0].message.content

        rows111 = response_replic.split("\n")
        data111 = [row.split(",") for row in rows111]
        df111 = pd.DataFrame(data111)
        df111 = df111.applymap(lambda x: x.replace('"', '') if isinstance(x, str) else x)

        related_table_input = df111.to_csv(index=False)

        rows111 = related_table_input.split("\n")
        data111 = [row.split(",") for row in rows111]

        df111 = pd.DataFrame(data111)
        df111 = df111.applymap(lambda x: x.replace('"', '') if isinstance(x, str) else x)

        start_index = df111[df111.iloc[:, 0].str.contains('```', na=False)].index[0]  # '```' 찾기
        header_row = start_index + 1  # 헤더는 '```' 다음 행

        columns = df111.iloc[header_row].tolist()
        data = df111.iloc[header_row + 1:].reset_index(drop=True)
        related_table_input = pd.DataFrame(data.values, columns=columns)
        print("\n dose_table_image()에서 표 복제된 결과:",related_table_input)

    else:
            related_table_input = None
    return related_table_input

def dose_table(related_table_input, related_text_input):
    client = OpenAI()
    response_our_excel = client.chat.completions.create(
      model="gpt-4o",
      messages=[
          {
              "role": "user",
              "content": f"""
                I want to extract table data from the given csv format data and populate my dataframe with the required details.
                My DataFrame columns are: columns = ["treat group", "total no. patients", "adverse event", "AE Type", "grade group", "patient (#)", "patient (%)", "dose reduction (%)", "dose discontinuation (%)", "dose interruption"]
                여기서  "dose reduction (%)", "dose discontinuation (%)", "dose interruption" 정보에 대해 테이블을 보고 기입하면 돼.

                Data provided: {related_table_input}

                Also, make sure to utilize the provided text data. If no tables are recognized, you can rely on the text data instead.
                Especially, when you are working on the column of 'AE type', if the caption says 'drug-related', just write TRAE. If the adverse event occurs during treatment, write TRAE; if it is not related to the drug, write TEAE; if there is no information, write Unknown.
                Text data: {related_text_input}

                ## Instructions:
                1. If any data is missing for a column, explicitly write None.
                2. Maintain the exact formatting of symbols, parentheses, and numbers as shown in the original table.
                3. Return a well-structured table in CSV format, with all values accurately placed in their corresponding columns.
                4. Do not include any descriptions, explanations, or additional text in the output, only the table content.
                Make sure the output table includes all subgroups and covers the entirety of the data provided without missing any details.
                """
          }
      ]
  )

    # prompt에 5-2) 나중에 후처리 때 처리해줘야함. 중간 csv만 빼오기.

    print(response_our_excel)
    response_our_excel_data = response_our_excel.choices[0].message.content

    rows111 = response_our_excel_data.split("\n")
    data111 = [row.split(",") for row in rows111]
    df111 = pd.DataFrame(data111)
    df111 = df111.applymap(lambda x: x.replace('"', '') if isinstance(x, str) else x)

    header_idx = df111[df111[0] == 'treat group'].index[0]
    df111.columns = df111.iloc[header_idx].values
    df_cleaned = df111.iloc[header_idx + 1:].reset_index(drop=True)
    end_idx = df_cleaned[df_cleaned.iloc[:, 0].str.contains('```', na=False)].index[0]
    dose_output = df_cleaned.iloc[:end_idx].reset_index(drop=True)
    print(dose_output)

    return dose_output

def tox_add_table(tox_table1=None, dose_table1=None):
    if tox_table1 is not None and dose_table1 is None: # tox table에 2개 인풋, dose에 없을 경우 && tox 1개 인풋, dose 1개 인풋
        if check_column_headers(tox_table1, dose_table1):
            tox_output = pd.concat([tox_table1, dose_table1], axis=0, ignore_index=True)
            print("tox_table1:")
            print(tox_table1)

            print("dose_table1:")
            print(dose_table1)
            
            print("final tox_output:")
            print(tox_output)

            return tox_output

    else:
        tox_output = None
        return None



## display setting... 
if paper_pdf_upload is None:
    st.markdown("논문 PDF 파일을 업로드해주세요.")

else: ## 우선, 무조건 pdf 들어가야함. 

    folder_name = paper_pdf_upload.name.split('.')[0]
    if not os.path.exists(folder_name):
        os.makedirs(folder_name)

    diaplay_replica_efficacy_excel_name = f"./{folder_name}/replica_efficacy_excel.xlsx"  
    diaplay_efficacy_excel_name = f"./{folder_name}/efficacy_excel.xlsx"

    diaplay_replica_toxicity_excel_name = f"./{folder_name}/replica_toxicity_excel.xlsx"  
    diaplay_replica_dose_excel_name = f"./{folder_name}/replica_dose_excel.xlsx"    
    diaplay_toxicity_excel_name = f"./{folder_name}/toxicity_excel.xlsx"
    diaplay_dose_excel_name = f"./{folder_name}/dose_excel.xlsx"

    related_text_input = None

    with tab1:
        col1, col2 = st.columns(2)
        status_placeholder_left = col1.empty()
        status_placeholder_right = col2.empty()

        with col1:
            button1 = st.button("Step 1")
            st.markdown("Step 1에서의 결과는 상위 항목과 하위 항목이 함께 출력되어야 정상적으로 처리된 상황입니다.")
            st.markdown("올바른 예시: Patients-(%), At 6 mo : (X) Patients-(%)-At 6 mo (O)")

        with col2:
            st.markdown("<br><br><br>", unsafe_allow_html=True)

        if button1:
            st.session_state.clear()
            status_placeholder_left.markdown("이미지 분석 후 표 복제 중...")

            if paper_pdf_upload is None and len(paper_efficacy_upload) == 0:
                status_placeholder_left.markdown("Please upload your files!")

            else:
                status_placeholder_left.markdown("Reading the paper...")
                if paper_pdf_upload is not None:  
                    related_text_input = eff_pdf_to_text(upload=paper_pdf_upload)

                else:
                    related_text_input = None

                if len(paper_efficacy_upload) == 1:
                    status_placeholder_left.markdown("Recognizing the table in the image...Efficacy Table 1개일 때")
                    related_table_input = efficacy_table_image(upload=paper_efficacy_upload[0])
                    related_table_input.to_excel(diaplay_replica_efficacy_excel_name, index=False, engine='openpyxl')
                    status_placeholder_left.empty()

                else:
                    status_placeholder_left.markdown("Efficacy Table 이미지를 입력해주세요.")

        if 'eff_image_index' not in st.session_state:
            st.session_state.eff_image_index = 0

        if os.path.exists(diaplay_replica_efficacy_excel_name):

            if len(paper_efficacy_upload) >= 2:
                current_image_file = paper_efficacy_upload[st.session_state.eff_image_index]
                current_image = Image.open(current_image_file)

                col1.write("Original Table :camera:")
                col1.image(current_image, caption=f"Image {st.session_state.eff_image_index + 1} of {len(paper_efficacy_upload)}")

            elif len(paper_efficacy_upload) == 1:
                current_image_file = paper_efficacy_upload[st.session_state.eff_image_index]
                current_image = Image.open(current_image_file)
                col1.write("Original Table :camera:")
                col1.image(current_image)

            saved_df = pd.read_excel(diaplay_replica_efficacy_excel_name, sheet_name="Sheet1")  # 모든 시트 읽기
            col2.write("Suggested Excel File :wrench:")
            edited_df = col2.data_editor(saved_df, use_container_width=True, height=1000, key="editor1") #num_rows = "dynamic",

        with col1:
            button2 = st.button("Step 2")
        
        if button2:
            #status_placeholder_right.markdown("복제된 표를 우리 엑셀 양식으로 변환")
            edited_df.to_excel(diaplay_replica_efficacy_excel_name, index=False, engine='openpyxl')
            #status_placeholder_right.markdown(f"복제된 표는 '{diaplay_replica_efficacy_excel_name}'에 저장되었습니다. 최종 output을 계산하고 있습니다...")

            print("\n\n이거보라!! 위에꺼 읽어올 때")
            print(edited_df)
            #print(related_text_input)
            efficacy_table_output = efficacy_table(edited_df, related_text_input)
            efficacy_table_output.to_excel(diaplay_efficacy_excel_name, index=False, engine='openpyxl')

            status_placeholder_right.markdown(f"최종 output은 '{diaplay_efficacy_excel_name}'에 저장되었습니다.")
            status_placeholder_right.empty()

        if os.path.exists(diaplay_efficacy_excel_name):

            if len(paper_efficacy_upload) >= 2:
                current_image_file = paper_efficacy_upload[st.session_state.eff_image_index]
                current_image = Image.open(current_image_file)

                col1.write("Original Table :camera:")
                col1.image(current_image, caption=f"Image {st.session_state.eff_image_index + 1} of {len(paper_efficacy_upload)}")

            elif len(paper_efficacy_upload) == 1:
                current_image_file = paper_efficacy_upload[st.session_state.eff_image_index]
                current_image = Image.open(current_image_file)
                col1.write("Original Table :camera:")
                col1.image(current_image)

            col2.empty()
            col2.write("Suggested Excel File :wrench:")
            efficacy_table_output = pd.read_excel(diaplay_efficacy_excel_name, sheet_name="Sheet1")  # 모든 시트 읽기
            print(efficacy_table_output)
            edited_df2 = col2.data_editor(efficacy_table_output, use_container_width=True, height=1000, key="editor2")


        with col1:
            button3 = st.button("Save")

        if button3:
            edited_df2.to_excel(diaplay_efficacy_excel_name, index=False, engine='openpyxl')
            st.markdown(f"복제된 표는 '{diaplay_efficacy_excel_name}'에 저장되었습니다.")

            

    with tab2:
        col1, col2 = st.columns(2)
        status_placeholder_left = col1.empty()
        status_placeholder_right = col2.empty()

        with col1:
            button3 = st.button("Step 1", key="tab2-button3")

        with col2:
            st.markdown("<br><br><br>", unsafe_allow_html=True)

        if button3:
            st.session_state.clear()
            status_placeholder_left.markdown("이미지 분석 후 표 복제 중...")

            related_text_input = tox_pdf_to_text(upload=paper_pdf_upload)
            related_tox_input = None
            related_dose_input = None


            # 조건 2: paper_toxicity_upload가 1개이고, paper_dose_upload가 없을 때
            if len(paper_toxicity_upload) == 1 and len(paper_dose_upload) == 0:
                status_placeholder_left.markdown("Recognizing the table in the image...Tox Table 1개, Dose Table가 없을 때")
                related_tox_input = tox_table_image(upload=paper_toxicity_upload[0])
                related_tox_input.to_excel(diaplay_replica_toxicity_excel_name, index=False, engine='openpyxl')
                #related_dose_input = pd.DataFrame()
                #related_dose_input.to_excel(diaplay_replica_dose_excel_name, index=False, engine='openpyxl')
                status_placeholder_left.empty()

            # 조건 3: paper_toxicity_upload가 없고, paper_dose_upload가 있을 때
            elif len(paper_toxicity_upload) == 0 and len(paper_dose_upload) == 1:
                status_placeholder_left.markdown("Recognizing the table in the image...Tox Table 0개, Dose Table가 있을 때")
                #related_tox_input = pd.DataFrame()
                #related_tox_input.to_excel(diaplay_replica_toxicity_excel_name, index=False, engine='openpyxl')
                related_dose_input = dose_table_image(upload=paper_dose_upload[0])
                related_dose_input.to_excel(diaplay_replica_dose_excel_name, index=False, engine='openpyxl')
                status_placeholder_left.empty()

            # 조건 4: paper_toxicity_upload가 1개이고, paper_dose_upload가 있을 때
            elif len(paper_toxicity_upload) == 1 and len(paper_dose_upload) == 1:
                status_placeholder_left.markdown("Recognizing the tables in the image...Tox Table 1개, Dose Table가 있을 때")
                related_tox_input = tox_table_image(upload=paper_toxicity_upload[0])
                related_dose_input = dose_table_image(upload=paper_dose_upload[0])
                related_tox_input.to_excel(diaplay_replica_toxicity_excel_name, index=False, engine='openpyxl')
                related_dose_input.to_excel(diaplay_replica_dose_excel_name, index=False, engine='openpyxl')
                print(f"DataFrame successfully saved to '{diaplay_toxicity_excel_name}'")

                status_placeholder_left.empty()

            else:
                status_placeholder_left.markdown("Toxicity Table 이미지 1개, Dose Table 이미지 1개가 최대입니다.")
                status_placeholder_left.empty()


        if 'tox_image_index' not in st.session_state:
            st.session_state.tox_image_index = 0

        if 'dose_image_index' not in st.session_state:
            st.session_state.dose_image_index = 0

        if os.path.exists(diaplay_replica_toxicity_excel_name):

            if len(paper_toxicity_upload) == 1:
                current_image_file = paper_toxicity_upload[st.session_state.tox_image_index]
                current_image = Image.open(current_image_file)
                col1.write("Original Table :camera:")
                col1.image(current_image)

                saved_df = pd.read_excel(diaplay_replica_toxicity_excel_name, sheet_name="Sheet1")  # 모든 시트 읽기
                col2.write("Suggested Excel File :wrench:")
                edited_df_tox = col2.data_editor(saved_df, use_container_width=True, height=1000, key="editor3") #num_rows = "dynamic",
            

            if len(paper_dose_upload) == 1:
                current_image_file = paper_dose_upload[st.session_state.dose_image_index]
                current_image = Image.open(current_image_file)
                col1.write("Original Table :camera:")
                col1.image(current_image)
            
                saved_df2 = pd.read_excel(diaplay_replica_dose_excel_name, sheet_name="Sheet1")  # 모든 시트 읽기
                col2.write("Suggested Excel File :wrench:")
                edited_df_dose = col2.data_editor(saved_df2, use_container_width=True, height=1000, key="editor4") #num_rows = "dynamic",


        with col1:
            button4 = st.button("Step 2", key="tab2-button4")
        
        if button4:
            #status_placeholder_right.markdown("복제된 표를 우리 엑셀 양식으로 변환")
            if os.path.exists(diaplay_replica_toxicity_excel_name):
                edited_df_tox.to_excel(diaplay_replica_toxicity_excel_name, index=False, engine='openpyxl')
                print("769 line:")
                print(edited_df_tox)
                toxicity_table_output = tox_table(edited_df_tox, related_text_input)
                toxicity_table_output.to_excel(diaplay_toxicity_excel_name, index=False, engine='openpyxl')
            else:
                toxicity_table_output = None
            
            if os.path.exists(diaplay_replica_dose_excel_name):
                edited_df_dose.to_excel(diaplay_replica_dose_excel_name, index=False, engine='openpyxl')
                dose_table_output = dose_table(edited_df_dose, related_text_input)
                dose_table_output.to_excel(diaplay_dose_excel_name, index=False, engine='openpyxl')
            else:
                dose_table_output = None

            if len(paper_dose_upload) == 1 and len(paper_toxicity_upload) == 1:
                tox_table_output = tox_add_table(toxicity_table_output, dose_table_output)
                tox_table_output.to_excel(diaplay_toxicity_excel_name, index=False, engine='openpyxl')

            status_placeholder_right.markdown(f"최종 output은 '{diaplay_toxicity_excel_name}'에 저장되었습니다.")
            status_placeholder_right.empty()

        if os.path.exists(diaplay_toxicity_excel_name):

            if len(paper_toxicity_upload) == 1:
                current_image_file = paper_toxicity_upload[st.session_state.eff_image_index]
                current_image = Image.open(current_image_file)
                col1.write("Original Table :camera:")
                col1.image(current_image)

            col2.empty()
            col2.write("Suggested Excel File :wrench:")
            tox_table_output = pd.read_excel(diaplay_toxicity_excel_name, sheet_name="Sheet1")  # 모든 시트 읽기
            edited_df3 = col2.data_editor(tox_table_output, use_container_width=True, height=1000, key="editor5")

        with col1:
            button5 = st.button("Save", key="tab2-button5")

        if button5:
            edited_df3.to_excel(diaplay_toxicity_excel_name, index=False, engine='openpyxl')
            st.markdown(f"복제된 표는 '{diaplay_toxicity_excel_name}'에 저장되었습니다.")

